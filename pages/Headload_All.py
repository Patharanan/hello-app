import streamlit as st
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import dask.dataframe as dd  # type: ignore
import tempfile
import os

st.set_page_config(page_title='Simple Time Element Analysis', page_icon='img.png')

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå DataFrame ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß
def analyze_headload(df, active_process_name, state_names):
    filtered_df = df[df['ActiveProcessName'] == active_process_name]
    
    if state_names:
        filtered_df = filtered_df[filtered_df['StateName'].isin(state_names)]
    
    # ‡∏Å‡∏£‡∏≠‡∏á‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤ 'TargetStateName' ‡πÄ‡∏õ‡πá‡∏ô 'None'
    filtered_df = filtered_df[filtered_df['TargetStateName'] != "None"]
    
    return filtered_df

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏ü‡∏•‡πå CSV ‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà‡∏î‡πâ‡∏ß‡∏¢ Dask DataFrame
def process_large_logfile(file_path):
    # ‡∏≠‡πà‡∏≤‡∏ô CSV ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ Dask DataFrame
    ddf = dd.read_csv(file_path)
    return ddf

def main():
    st.title("Analysis üìä")

    uploaded_file = st.file_uploader('Upload a large CSV file', type='csv')

    if uploaded_file:
        st.text(uploaded_file.name)

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
        temp_file_path = tempfile.NamedTemporaryFile(delete=False).name

        # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
        with open(temp_file_path, 'wb') as f:
            f.write(uploaded_file.getvalue())

        # ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏ü‡∏•‡πå‡∏•‡πá‡∏≠‡∏Å‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà‡∏î‡πâ‡∏ß‡∏¢ Dask DataFrame
        ddf = process_large_logfile(temp_file_path)

        if ddf is not None:
            # ‡πÅ‡∏õ‡∏•‡∏á Dask DataFrame ‡πÄ‡∏õ‡πá‡∏ô Pandas DataFrame ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏û‡∏•‡πá‡∏≠‡∏ï
            df = ddf.compute()

            # ‡∏ï‡∏±‡∏î‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
            df.columns = df.columns.str.strip()

            # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á‡∏î‡πâ‡∏ß‡∏¢ Pandas DataFrame
            active_process_name = st.selectbox('Select ActiveProcessName', df['ActiveProcessName'].unique())
            
            if active_process_name:
                state_names = df[df['ActiveProcessName'] == active_process_name]['StateName'].unique()
                selected_state_names = st.multiselect('Select StateName(s)', state_names, default=list(state_names))
            else:
                selected_state_names = []
                
            # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡∏∞‡∏û‡∏•‡πá‡∏≠‡∏ï‡∏î‡πâ‡∏ß‡∏¢ Pandas DataFrame ‡∏ï‡∏≤‡∏°‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
            filtered_df = analyze_headload(df, active_process_name, selected_state_names)

            if not filtered_df.empty:
                st.subheader('Filtered Data')
                st.write(filtered_df)

                # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ 'Diff or period of time' ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞ StateName
                avg_diff = filtered_df.groupby('StateName')['Diff or period of time'].mean().reset_index()

                # ‡∏Å‡∏≤‡∏£‡∏û‡∏•‡πá‡∏≠‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                plt.figure(figsize=(10, 6))
                ax = sns.barplot(data=avg_diff, x='StateName', y='Diff or period of time')
                plt.xlabel('StateName')
                plt.ylabel('Avg Diff or period of time')
                plt.title('Average Diff or period of time for selected StateNames')
                plt.xticks(rotation=45, ha='right')  # ‡∏´‡∏°‡∏∏‡∏ô‡∏ï‡∏±‡∏ß‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡πÅ‡∏Å‡∏ô X ‡πÄ‡∏≠‡∏µ‡∏¢‡∏á 45 ‡∏≠‡∏á‡∏®‡∏≤‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏ß‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏Ç‡∏ß‡∏≤
                
                # ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡πâ‡∏≠‡∏ô‡∏Ñ‡πà‡∏≤‡∏•‡∏¥‡∏°‡∏¥‡∏ï‡πÄ‡∏≠‡∏á
                y_limit = st.number_input('Y-axis limit', min_value=0, value=5000)
                plt.ylim(0, y_limit)
                
                # Annotate max value on the bars
                for p in ax.patches:
                    ax.annotate(f'{p.get_height():.2f}', (p.get_x() + p.get_width() / 2., p.get_height()),
                                ha='center', va='center', xytext=(0, 10), textcoords='offset points')
                
                st.pyplot(plt)
            else:
                st.write("No data available for the selected filters.")

        # ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏ö‡∏ö‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
        os.remove(temp_file_path)

    else:
        st.write("No data available. Please upload log files in this page.")



if __name__ == '__main__':
    main()

st.markdown("""

    <div class="content">
    <p>       </p>
        <p>
            &copy; 2024 By Patharanan P. | For Seagate Korat.
        </p>
    </div>
""", unsafe_allow_html=True)


